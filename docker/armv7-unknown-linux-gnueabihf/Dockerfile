# Special Docker image for cross compiling building Rust on GameShell

FROM japaric/armv7-unknown-linux-gnueabihf:latest

# Build SDL2 for 32-bit ARMv7
ADD https://www.libsdl.org/release/SDL2-2.0.8.tar.gz /tmp/sdl2.tar.gz
RUN cd /tmp && \
    tar -pxzf sdl2.tar.gz && \
    cd SDL2-2.0.8 && \
    mkdir build && \
    cd build && \
    #export SDL2_SRC=/tmp/SDL2-2.0.8/src && \
    export TARGETMACH=arm-none-linux-gnueabi && \
    export CC=arm-linux-gnueabihf-gcc && \
    export CXX=arm-linux-gnueabihf-g++ && \
    ../configure --host=$TARGETMACH --disable-pulseaudio && \
    make -j 8 && \
    make -j 8 install && \
    echo "SDL2 installed successfully."

# Build SDL2_image for 32-bit ARMv7
ADD https://www.libsdl.org/projects/SDL_image/release/SDL2_image-2.0.3.tar.gz /tmp/sdl2_image.tar.gz
RUN cd /tmp && \
    tar -pxzf sdl2_image.tar.gz && \
    cd SDL2_image-2.0.3 && \
    mkdir build && \
    cd build && \
    export TARGETMACH=arm-none-linux-gnueabi && \
    export CC=arm-linux-gnueabihf-gcc && \
    export CXX=arm-linux-gnueabihf-g++ && \
    ../configure --host=$TARGETMACH && \
    make -j 8 && \
    make -j 8 install && \
    echo "SDL2_image installed successfully."

RUN apt-get install -y libclang-dev

ENV RUSTFLAGS="-L /usr/local/lib"

# FROM ubuntu:12.04
#
# RUN apt-get update && \
#     apt-get install -y --no-install-recommends \
#     ca-certificates \
#     cmake \
#     gcc \
#     libc6-dev \
#     make \
#     pkg-config
#
# COPY xargo.sh /
# RUN bash /xargo.sh
#
# COPY cmake.sh /
# RUN apt-get purge --auto-remove -y cmake && \
#     bash /cmake.sh 2.8.11
#
# COPY openssl.sh qemu.sh /
# RUN apt-get install -y --no-install-recommends \
#     g++-arm-linux-gnueabihf \
#     libc6-dev-armhf-cross && \
#     bash /openssl.sh linux-armv4 arm-linux-gnueabihf- && \
#     bash /qemu.sh arm
#
# ENV CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc \
#     RUSTC_LINKER=arm-linux-gnueabihf-gcc \
#     CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_RUNNER=qemu-arm \
#     CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc \
#     CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++ \
#     OPENSSL_DIR=/openssl \
#     OPENSSL_INCLUDE_DIR=/openssl/include \
#     OPENSSL_LIB_DIR=/openssl/lib \
#     QEMU_LD_PREFIX=/usr/arm-linux-gnueabihf \
#     RUST_TEST_THREADS=1

#FROM arm32v7/debian:9.3

#RUN apt-get update && \
#    apt-get install -y --no-install-recommends \
#    python python-dev \
#    libsdl2-dev libsdl2-image-dev \
#    ca-certificates \
#    cmake \
#    gcc \
#    libc6-dev \
#    make \
#    pkg-config
#
#COPY xargo.sh /
#RUN bash /xargo.sh
#
#COPY cmake.sh /
#RUN apt-get purge --auto-remove -y cmake && \
#    bash /cmake.sh 2.8.11
#
#COPY openssl.sh qemu.sh /
#RUN apt-get install -y --no-install-recommends \
#    g++-arm-linux-gnueabihf \
#    libc6-dev-armhf-cross && \
#    bash /openssl.sh linux-armv4 arm-linux-gnueabihf- && \
#    bash /qemu.sh arm

#ENV CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_LINKER=arm-linux-gnueabihf-gcc \
#    CARGO_TARGET_ARMV7_UNKNOWN_LINUX_GNUEABIHF_RUNNER=qemu-arm \
#    CC_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-gcc \
#    CXX_armv7_unknown_linux_gnueabihf=arm-linux-gnueabihf-g++ \
#    OPENSSL_DIR=/openssl \
#    OPENSSL_INCLUDE_DIR=/openssl/include \
#    OPENSSL_LIB_DIR=/openssl/lib \
#    QEMU_LD_PREFIX=/usr/arm-linux-gnueabihf \
#    RUST_TEST_THREADS=1
